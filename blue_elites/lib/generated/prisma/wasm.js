
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  full_name: 'full_name',
  avatar_url: 'avatar_url',
  role: 'role',
  kyc_verified: 'kyc_verified',
  kyc_status: 'kyc_status',
  total_donated: 'total_donated',
  auto_tithing_enabled: 'auto_tithing_enabled',
  auto_tithing_percentage: 'auto_tithing_percentage',
  kingdom_features_enabled: 'kingdom_features_enabled',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ServiceProviderScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  business_name: 'business_name',
  category: 'category',
  subcategory: 'subcategory',
  description: 'description',
  contact_email: 'contact_email',
  phone_number: 'phone_number',
  address: 'address',
  city: 'city',
  state: 'state',
  zip_code: 'zip_code',
  verification_status: 'verification_status',
  rating: 'rating',
  total_bookings: 'total_bookings',
  total_reviews: 'total_reviews',
  background_check_passed: 'background_check_passed',
  background_check_date: 'background_check_date',
  nda_signed: 'nda_signed',
  service_areas: 'service_areas',
  price_range_min: 'price_range_min',
  price_range_max: 'price_range_max',
  images: 'images',
  certifications: 'certifications',
  duration_minutes: 'duration_minutes',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  client_id: 'client_id',
  provider_id: 'provider_id',
  service_category: 'service_category',
  service_title: 'service_title',
  service_description: 'service_description',
  booking_date: 'booking_date',
  start_time: 'start_time',
  end_time: 'end_time',
  status: 'status',
  amount: 'amount',
  currency: 'currency',
  commission_percentage: 'commission_percentage',
  platform_fee: 'platform_fee',
  escrow_released: 'escrow_released',
  stripe_payment_intent_id: 'stripe_payment_intent_id',
  completion_confirmed_at: 'completion_confirmed_at',
  cancellation_reason: 'cancellation_reason',
  special_instructions: 'special_instructions',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  booking_id: 'booking_id',
  reviewer_id: 'reviewer_id',
  provider_id: 'provider_id',
  rating: 'rating',
  title: 'title',
  comment: 'comment',
  response: 'response',
  response_date: 'response_date',
  is_verified: 'is_verified',
  helpful_count: 'helpful_count',
  created_at: 'created_at'
};

exports.Prisma.ProviderApplicationScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  status: 'status',
  business_data: 'business_data',
  services_data: 'services_data',
  step: 'step',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.DonationScalarFieldEnum = {
  id: 'id',
  donor_id: 'donor_id',
  amount: 'amount',
  currency: 'currency',
  cause: 'cause',
  ngo_id: 'ngo_id',
  is_anonymous: 'is_anonymous',
  is_auto_tithe: 'is_auto_tithe',
  source_booking_id: 'source_booking_id',
  verified: 'verified',
  blockchain_tx_hash: 'blockchain_tx_hash',
  blockchain_network: 'blockchain_network',
  created_at: 'created_at'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  booking_id: 'booking_id',
  stripe_payment_intent_id: 'stripe_payment_intent_id',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  metadata: 'metadata',
  refunded_amount: 'refunded_amount',
  refunded_at: 'refunded_at',
  escrow_released_at: 'escrow_released_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.DisputeScalarFieldEnum = {
  id: 'id',
  booking_id: 'booking_id',
  raised_by: 'raised_by',
  against: 'against',
  reason: 'reason',
  description: 'description',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ImpactReportScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  amount_used: 'amount_used',
  beneficiaries_count: 'beneficiaries_count',
  images: 'images',
  location: 'location',
  completion_date: 'completion_date',
  verified: 'verified',
  created_at: 'created_at'
};

exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  title: 'title',
  channel: 'channel',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  conversation_id: 'conversation_id',
  role: 'role',
  content: 'content',
  metadata: 'metadata',
  timestamp: 'timestamp'
};

exports.Prisma.RealEstateListingScalarFieldEnum = {
  id: 'id',
  status: 'status',
  verified: 'verified',
  location: 'location',
  city: 'city',
  property_type: 'property_type',
  price: 'price',
  bedrooms: 'bedrooms',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  admin_id: 'admin_id',
  action_type: 'action_type',
  target_type: 'target_type',
  target_id: 'target_id',
  details: 'details',
  created_at: 'created_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.ServiceCategory = exports.$Enums.ServiceCategory = {
  luxury_stays: 'luxury_stays',
  private_chefs: 'private_chefs',
  yacht_charters: 'yacht_charters',
  private_jets: 'private_jets',
  event_planning: 'event_planning',
  personal_shopping: 'personal_shopping',
  security_services: 'security_services',
  wellness_retreats: 'wellness_retreats',
  concierge_services: 'concierge_services',
  exclusive_access: 'exclusive_access',
  automotive_detailing: 'automotive_detailing',
  home_services: 'home_services',
  beauty_wellness: 'beauty_wellness',
  fashion: 'fashion',
  tech_lifestyle: 'tech_lifestyle',
  mobility: 'mobility',
  real_estate: 'real_estate',
  investment: 'investment',
  auction: 'auction'
};

exports.BookingStatus = exports.$Enums.BookingStatus = {
  pending: 'pending',
  confirmed: 'confirmed',
  completed: 'completed',
  cancelled: 'cancelled',
  disputed: 'disputed'
};

exports.VerificationStatus = exports.$Enums.VerificationStatus = {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected'
};

exports.Prisma.ModelName = {
  User: 'User',
  ServiceProvider: 'ServiceProvider',
  Booking: 'Booking',
  Review: 'Review',
  ProviderApplication: 'ProviderApplication',
  Donation: 'Donation',
  Payment: 'Payment',
  Dispute: 'Dispute',
  ImpactReport: 'ImpactReport',
  Conversation: 'Conversation',
  Message: 'Message',
  RealEstateListing: 'RealEstateListing',
  AuditLog: 'AuditLog'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/teamspace/studios/this_studio/blue_elites/lib/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-1.1.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/teamspace/studios/this_studio/blue_elites/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.17.1",
  "engineVersion": "272a37d34178c2894197e17273bf937f25acdeac",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "sqlite",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../lib/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\nenum ServiceCategory {\n  luxury_stays\n  private_chefs\n  yacht_charters\n  private_jets\n  event_planning\n  personal_shopping\n  security_services\n  wellness_retreats\n  concierge_services\n  exclusive_access\n  automotive_detailing\n  home_services\n  beauty_wellness\n  fashion\n  tech_lifestyle\n  mobility\n  real_estate\n  investment\n  auction\n  // Add other categories as needed from the SERVICE_MARKETPLACE_SUMMARY.md\n}\n\nenum BookingStatus {\n  pending\n  confirmed\n  completed\n  cancelled\n  disputed // Added disputed status\n}\n\nenum VerificationStatus {\n  pending\n  approved\n  rejected\n}\n\nmodel User {\n  id                       String             @id @default(uuid()) @map(\"id\")\n  email                    String             @unique\n  password                 String // In a real app, this would be hashed\n  full_name                String\n  avatar_url               String?\n  role                     String             @default(\"client\") // Added from QUICK_START.md\n  kyc_verified             Boolean            @default(false) // Added from QUICK_START.md\n  kyc_status               VerificationStatus @default(pending) // Inferred from app/admin/users/page.tsx\n  total_donated            Float              @default(0) // Added for increment_user_donations RPC\n  auto_tithing_enabled     Boolean            @default(false) // Added for auto-tithing\n  auto_tithing_percentage  Int                @default(10) // Added for auto-tithing\n  kingdom_features_enabled Json? // Changed from Boolean to Json for array of strings\n  created_at               DateTime           @default(now()) @map(\"created_at\")\n  updated_at               DateTime           @updatedAt @map(\"updated_at\")\n\n  serviceProviders     ServiceProvider[]\n  clientBookings       Booking[]             @relation(\"ClientBookings\")\n  reviews              Review[]\n  providerApplications ProviderApplication[]\n  donations            Donation[]            @relation(\"UserDonations\") // Added relation\n  raisedDisputes       Dispute[]             @relation(\"RaisedByDisputes\") // Added relation\n  againstDisputes      Dispute[]             @relation(\"AgainstDisputes\") // Added relation\n  conversations        Conversation[]\n}\n\nmodel ServiceProvider {\n  id                      String             @id @default(uuid()) @map(\"id\")\n  user_id                 String             @unique @map(\"user_id\") // Added @unique\n  user                    User               @relation(fields: [user_id], references: [id])\n  business_name           String\n  category                ServiceCategory\n  subcategory             String? // Added from SERVICE_MARKETPLACE_SUMMARY.md\n  description             String\n  contact_email           String? // Inferred, not explicitly in SQL but good to have\n  phone_number            String? // Inferred, not explicitly in SQL but good to have\n  address                 String? // Inferred, not explicitly in SQL but good to have\n  city                    String? // Inferred, not explicitly in SQL but good to have\n  state                   String? // Inferred, not explicitly in SQL but good to have\n  zip_code                String? // Inferred, not explicitly in SQL but good to have\n  verification_status     VerificationStatus @default(pending)\n  rating                  Float              @default(0)\n  total_bookings          Int                @default(0)\n  total_reviews           Int                @default(0)\n  background_check_passed Boolean            @default(false)\n  background_check_date   DateTime?\n  nda_signed              Boolean            @default(false)\n  service_areas           String // Changed from String[]\n  price_range_min         Float?\n  price_range_max         Float?\n  images                  String // Changed from String[]\n  certifications          String // Changed from String[]\n  duration_minutes        Int                @default(60) // Added from app/provider/services/page.tsx\n  is_active               Boolean            @default(true) // Added from app/provider/services/page.tsx\n  created_at              DateTime           @default(now()) @map(\"created_at\")\n  updated_at              DateTime           @updatedAt @map(\"updated_at\")\n\n  bookings Booking[] @relation(\"ProviderBookings\")\n  reviews  Review[]\n}\n\nmodel Booking {\n  id                       String          @id @default(uuid()) @map(\"id\")\n  client_id                String          @map(\"client_id\")\n  client                   User            @relation(\"ClientBookings\", fields: [client_id], references: [id])\n  provider_id              String          @map(\"provider_id\")\n  provider                 ServiceProvider @relation(\"ProviderBookings\", fields: [provider_id], references: [id])\n  service_category         ServiceCategory\n  service_title            String\n  service_description      String\n  booking_date             DateTime        @map(\"booking_date\")\n  start_time               String?\n  end_time                 String?\n  status                   BookingStatus   @default(pending)\n  amount                   Float\n  currency                 String          @default(\"USD\")\n  commission_percentage    Float           @default(30)\n  platform_fee             Float           @default(0)\n  escrow_released          Boolean         @default(false)\n  stripe_payment_intent_id String?\n  completion_confirmed_at  DateTime?\n  cancellation_reason      String?\n  special_instructions     String?\n  created_at               DateTime        @default(now()) @map(\"created_at\")\n  updated_at               DateTime        @updatedAt @map(\"updated_at\")\n\n  reviews  Review[]\n  payments Payment[]\n  disputes Dispute[]\n}\n\nmodel Review {\n  id            String          @id @default(uuid()) @map(\"id\")\n  booking_id    String          @unique @map(\"booking_id\") // One review per booking\n  booking       Booking         @relation(fields: [booking_id], references: [id])\n  reviewer_id   String          @map(\"reviewer_id\")\n  reviewer      User            @relation(fields: [reviewer_id], references: [id])\n  provider_id   String          @map(\"provider_id\")\n  provider      ServiceProvider @relation(fields: [provider_id], references: [id])\n  rating        Int\n  title         String?\n  comment       String\n  response      String?\n  response_date DateTime?\n  is_verified   Boolean         @default(false)\n  helpful_count Int             @default(0)\n  created_at    DateTime        @default(now()) @map(\"created_at\")\n}\n\nmodel ProviderApplication {\n  id            String   @id @default(uuid())\n  user_id       String   @unique\n  user          User     @relation(fields: [user_id], references: [id])\n  status        String   @default(\"draft\")\n  business_data Json // Store as JSON\n  services_data Json // Store as JSON\n  step          Int\n  created_at    DateTime @default(now())\n  updated_at    DateTime @updatedAt\n}\n\nmodel Donation {\n  id                 String   @id @default(uuid())\n  donor_id           String   @map(\"donor_id\")\n  donor              User     @relation(\"UserDonations\", fields: [donor_id], references: [id])\n  amount             Float\n  currency           String // Added from makeDonation function\n  cause              String? // Added from makeDonation function\n  ngo_id             String? // Added from makeDonation function\n  is_anonymous       Boolean  @default(false) // Added from makeDonation function\n  is_auto_tithe      Boolean  @default(false) // Added from app/api/bookings/[id]/complete/route.ts\n  source_booking_id  String? // Added from app/api/bookings/[id]/complete/route.ts\n  verified           Boolean  @default(false) // Added from makeDonation function\n  blockchain_tx_hash String? // Added from app/api/donations/recent/route.ts\n  blockchain_network String? // Added from app/api/donations/recent/route.ts\n  created_at         DateTime @default(now())\n}\n\nmodel Payment {\n  id                       String    @id @default(uuid())\n  booking_id               String?\n  booking                  Booking?  @relation(fields: [booking_id], references: [id])\n  stripe_payment_intent_id String    @unique\n  amount                   Float\n  currency                 String\n  status                   String // e.g., 'pending', 'completed', 'failed', 'refunded'\n  metadata                 Json?\n  refunded_amount          Float?\n  refunded_at              DateTime?\n  escrow_released_at       DateTime? // Added from app/api/bookings/[id]/complete/route.ts\n  created_at               DateTime  @default(now())\n  updated_at               DateTime  @updatedAt\n}\n\nmodel Dispute {\n  id           String   @id @default(uuid())\n  booking_id   String\n  booking      Booking  @relation(fields: [booking_id], references: [id])\n  raised_by    String\n  raisedByUser User     @relation(\"RaisedByDisputes\", fields: [raised_by], references: [id])\n  against      String\n  againstUser  User     @relation(\"AgainstDisputes\", fields: [against], references: [id])\n  reason       String?\n  description  String?\n  status       String // e.g., 'open', 'resolved', 'closed'\n  created_at   DateTime @default(now())\n  updated_at   DateTime @updatedAt\n}\n\nmodel ImpactReport {\n  id                  String    @id @default(uuid())\n  title               String\n  description         String\n  amount_used         Float\n  beneficiaries_count Int?\n  images              String // Storing as string, assuming comma-separated or JSON string\n  location            String?\n  completion_date     DateTime?\n  verified            Boolean   @default(false)\n  created_at          DateTime  @default(now())\n}\n\nmodel Conversation {\n  id         String    @id @default(uuid())\n  user_id    String\n  user       User      @relation(fields: [user_id], references: [id])\n  title      String? // Added title field\n  channel    String?   @default(\"web\") // Added channel field\n  status     String?   @default(\"active\") // Added status field\n  created_at DateTime  @default(now())\n  updated_at DateTime  @updatedAt\n  messages   Message[]\n}\n\nmodel Message {\n  id              String       @id @default(uuid())\n  conversation_id String\n  conversation    Conversation @relation(fields: [conversation_id], references: [id])\n  role            String // 'user' or 'assistant'\n  content         String\n  metadata        Json? // Added metadata field\n  timestamp       DateTime     @default(now())\n}\n\nmodel RealEstateListing {\n  id            String   @id @default(uuid())\n  status        String   @default(\"available\") // e.g., 'available', 'sold', 'rented'\n  verified      Boolean  @default(false)\n  location      String?\n  city          String?\n  property_type String? // e.g., 'house', 'apartment', 'land'\n  price         Float?\n  bedrooms      Int?\n  // Add other fields as needed based on the application's requirements\n  created_at    DateTime @default(now())\n  updated_at    DateTime @updatedAt\n}\n\nmodel AuditLog {\n  id          String   @id @default(uuid())\n  admin_id    String // Added admin_id\n  action_type String\n  target_type String?\n  target_id   String?\n  details     Json?\n  created_at  DateTime @default(now())\n}\n",
  "inlineSchemaHash": "d91bd859bb0f9c3aec48e925b2557210ece255c3501b7ca3929723dc4051126c",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"id\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"full_name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"avatar_url\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"kyc_verified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"kyc_status\",\"kind\":\"enum\",\"type\":\"VerificationStatus\"},{\"name\":\"total_donated\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"auto_tithing_enabled\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"auto_tithing_percentage\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"kingdom_features_enabled\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updated_at\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"serviceProviders\",\"kind\":\"object\",\"type\":\"ServiceProvider\",\"relationName\":\"ServiceProviderToUser\"},{\"name\":\"clientBookings\",\"kind\":\"object\",\"type\":\"Booking\",\"relationName\":\"ClientBookings\"},{\"name\":\"reviews\",\"kind\":\"object\",\"type\":\"Review\",\"relationName\":\"ReviewToUser\"},{\"name\":\"providerApplications\",\"kind\":\"object\",\"type\":\"ProviderApplication\",\"relationName\":\"ProviderApplicationToUser\"},{\"name\":\"donations\",\"kind\":\"object\",\"type\":\"Donation\",\"relationName\":\"UserDonations\"},{\"name\":\"raisedDisputes\",\"kind\":\"object\",\"type\":\"Dispute\",\"relationName\":\"RaisedByDisputes\"},{\"name\":\"againstDisputes\",\"kind\":\"object\",\"type\":\"Dispute\",\"relationName\":\"AgainstDisputes\"},{\"name\":\"conversations\",\"kind\":\"object\",\"type\":\"Conversation\",\"relationName\":\"ConversationToUser\"}],\"dbName\":null},\"ServiceProvider\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"id\"},{\"name\":\"user_id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ServiceProviderToUser\"},{\"name\":\"business_name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"enum\",\"type\":\"ServiceCategory\"},{\"name\":\"subcategory\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contact_email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone_number\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"address\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"city\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"state\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"zip_code\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"verification_status\",\"kind\":\"enum\",\"type\":\"VerificationStatus\"},{\"name\":\"rating\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"total_bookings\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"total_reviews\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"background_check_passed\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"background_check_date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"nda_signed\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"service_areas\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"price_range_min\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"price_range_max\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"images\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"certifications\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"duration_minutes\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"is_active\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updated_at\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"bookings\",\"kind\":\"object\",\"type\":\"Booking\",\"relationName\":\"ProviderBookings\"},{\"name\":\"reviews\",\"kind\":\"object\",\"type\":\"Review\",\"relationName\":\"ReviewToServiceProvider\"}],\"dbName\":null},\"Booking\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"id\"},{\"name\":\"client_id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"client_id\"},{\"name\":\"client\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ClientBookings\"},{\"name\":\"provider_id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"provider_id\"},{\"name\":\"provider\",\"kind\":\"object\",\"type\":\"ServiceProvider\",\"relationName\":\"ProviderBookings\"},{\"name\":\"service_category\",\"kind\":\"enum\",\"type\":\"ServiceCategory\"},{\"name\":\"service_title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"service_description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"booking_date\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"booking_date\"},{\"name\":\"start_time\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"end_time\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"BookingStatus\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"currency\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"commission_percentage\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"platform_fee\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"escrow_released\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"stripe_payment_intent_id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"completion_confirmed_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"cancellation_reason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"special_instructions\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updated_at\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"reviews\",\"kind\":\"object\",\"type\":\"Review\",\"relationName\":\"BookingToReview\"},{\"name\":\"payments\",\"kind\":\"object\",\"type\":\"Payment\",\"relationName\":\"BookingToPayment\"},{\"name\":\"disputes\",\"kind\":\"object\",\"type\":\"Dispute\",\"relationName\":\"BookingToDispute\"}],\"dbName\":null},\"Review\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"id\"},{\"name\":\"booking_id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"booking_id\"},{\"name\":\"booking\",\"kind\":\"object\",\"type\":\"Booking\",\"relationName\":\"BookingToReview\"},{\"name\":\"reviewer_id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"reviewer_id\"},{\"name\":\"reviewer\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ReviewToUser\"},{\"name\":\"provider_id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"provider_id\"},{\"name\":\"provider\",\"kind\":\"object\",\"type\":\"ServiceProvider\",\"relationName\":\"ReviewToServiceProvider\"},{\"name\":\"rating\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"comment\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"response\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"response_date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"is_verified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"helpful_count\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"}],\"dbName\":null},\"ProviderApplication\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user_id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ProviderApplicationToUser\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"business_data\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"services_data\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"step\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updated_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Donation\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"donor_id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"donor_id\"},{\"name\":\"donor\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserDonations\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"currency\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"cause\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ngo_id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"is_anonymous\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"is_auto_tithe\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"source_booking_id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"verified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"blockchain_tx_hash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"blockchain_network\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Payment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"booking_id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"booking\",\"kind\":\"object\",\"type\":\"Booking\",\"relationName\":\"BookingToPayment\"},{\"name\":\"stripe_payment_intent_id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"currency\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"refunded_amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"refunded_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"escrow_released_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updated_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Dispute\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"booking_id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"booking\",\"kind\":\"object\",\"type\":\"Booking\",\"relationName\":\"BookingToDispute\"},{\"name\":\"raised_by\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"raisedByUser\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"RaisedByDisputes\"},{\"name\":\"against\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"againstUser\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AgainstDisputes\"},{\"name\":\"reason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updated_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"ImpactReport\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"amount_used\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"beneficiaries_count\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"images\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"location\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"completion_date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"verified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Conversation\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user_id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ConversationToUser\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"channel\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updated_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"messages\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"ConversationToMessage\"}],\"dbName\":null},\"Message\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"conversation_id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"conversation\",\"kind\":\"object\",\"type\":\"Conversation\",\"relationName\":\"ConversationToMessage\"},{\"name\":\"role\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"timestamp\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"RealEstateListing\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"verified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"location\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"city\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"property_type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"bedrooms\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updated_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"AuditLog\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"admin_id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"action_type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"target_type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"target_id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"details\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

