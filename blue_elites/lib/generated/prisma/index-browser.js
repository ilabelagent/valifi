
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  full_name: 'full_name',
  avatar_url: 'avatar_url',
  role: 'role',
  kyc_verified: 'kyc_verified',
  kyc_status: 'kyc_status',
  total_donated: 'total_donated',
  auto_tithing_enabled: 'auto_tithing_enabled',
  auto_tithing_percentage: 'auto_tithing_percentage',
  kingdom_features_enabled: 'kingdom_features_enabled',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ServiceProviderScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  business_name: 'business_name',
  category: 'category',
  subcategory: 'subcategory',
  description: 'description',
  contact_email: 'contact_email',
  phone_number: 'phone_number',
  address: 'address',
  city: 'city',
  state: 'state',
  zip_code: 'zip_code',
  verification_status: 'verification_status',
  rating: 'rating',
  total_bookings: 'total_bookings',
  total_reviews: 'total_reviews',
  background_check_passed: 'background_check_passed',
  background_check_date: 'background_check_date',
  nda_signed: 'nda_signed',
  service_areas: 'service_areas',
  price_range_min: 'price_range_min',
  price_range_max: 'price_range_max',
  images: 'images',
  certifications: 'certifications',
  duration_minutes: 'duration_minutes',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  client_id: 'client_id',
  provider_id: 'provider_id',
  service_category: 'service_category',
  service_title: 'service_title',
  service_description: 'service_description',
  booking_date: 'booking_date',
  start_time: 'start_time',
  end_time: 'end_time',
  status: 'status',
  amount: 'amount',
  currency: 'currency',
  commission_percentage: 'commission_percentage',
  platform_fee: 'platform_fee',
  escrow_released: 'escrow_released',
  stripe_payment_intent_id: 'stripe_payment_intent_id',
  completion_confirmed_at: 'completion_confirmed_at',
  cancellation_reason: 'cancellation_reason',
  special_instructions: 'special_instructions',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  booking_id: 'booking_id',
  reviewer_id: 'reviewer_id',
  provider_id: 'provider_id',
  rating: 'rating',
  title: 'title',
  comment: 'comment',
  response: 'response',
  response_date: 'response_date',
  is_verified: 'is_verified',
  helpful_count: 'helpful_count',
  created_at: 'created_at'
};

exports.Prisma.ProviderApplicationScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  status: 'status',
  business_data: 'business_data',
  services_data: 'services_data',
  step: 'step',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.DonationScalarFieldEnum = {
  id: 'id',
  donor_id: 'donor_id',
  amount: 'amount',
  currency: 'currency',
  cause: 'cause',
  ngo_id: 'ngo_id',
  is_anonymous: 'is_anonymous',
  is_auto_tithe: 'is_auto_tithe',
  source_booking_id: 'source_booking_id',
  verified: 'verified',
  blockchain_tx_hash: 'blockchain_tx_hash',
  blockchain_network: 'blockchain_network',
  created_at: 'created_at'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  booking_id: 'booking_id',
  stripe_payment_intent_id: 'stripe_payment_intent_id',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  metadata: 'metadata',
  refunded_amount: 'refunded_amount',
  refunded_at: 'refunded_at',
  escrow_released_at: 'escrow_released_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.DisputeScalarFieldEnum = {
  id: 'id',
  booking_id: 'booking_id',
  raised_by: 'raised_by',
  against: 'against',
  reason: 'reason',
  description: 'description',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ImpactReportScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  amount_used: 'amount_used',
  beneficiaries_count: 'beneficiaries_count',
  images: 'images',
  location: 'location',
  completion_date: 'completion_date',
  verified: 'verified',
  created_at: 'created_at'
};

exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  title: 'title',
  channel: 'channel',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  conversation_id: 'conversation_id',
  role: 'role',
  content: 'content',
  metadata: 'metadata',
  timestamp: 'timestamp'
};

exports.Prisma.RealEstateListingScalarFieldEnum = {
  id: 'id',
  status: 'status',
  verified: 'verified',
  location: 'location',
  city: 'city',
  property_type: 'property_type',
  price: 'price',
  bedrooms: 'bedrooms',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  admin_id: 'admin_id',
  action_type: 'action_type',
  target_type: 'target_type',
  target_id: 'target_id',
  details: 'details',
  created_at: 'created_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.VerificationStatus = exports.$Enums.VerificationStatus = {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected'
};

exports.ServiceCategory = exports.$Enums.ServiceCategory = {
  luxury_stays: 'luxury_stays',
  private_chefs: 'private_chefs',
  yacht_charters: 'yacht_charters',
  private_jets: 'private_jets',
  event_planning: 'event_planning',
  personal_shopping: 'personal_shopping',
  security_services: 'security_services',
  wellness_retreats: 'wellness_retreats',
  concierge_services: 'concierge_services',
  exclusive_access: 'exclusive_access',
  automotive_detailing: 'automotive_detailing',
  home_services: 'home_services',
  beauty_wellness: 'beauty_wellness',
  fashion: 'fashion',
  tech_lifestyle: 'tech_lifestyle',
  mobility: 'mobility',
  real_estate: 'real_estate',
  investment: 'investment',
  auction: 'auction'
};

exports.BookingStatus = exports.$Enums.BookingStatus = {
  pending: 'pending',
  confirmed: 'confirmed',
  completed: 'completed',
  cancelled: 'cancelled',
  disputed: 'disputed'
};

exports.Prisma.ModelName = {
  User: 'User',
  ServiceProvider: 'ServiceProvider',
  Booking: 'Booking',
  Review: 'Review',
  ProviderApplication: 'ProviderApplication',
  Donation: 'Donation',
  Payment: 'Payment',
  Dispute: 'Dispute',
  ImpactReport: 'ImpactReport',
  Conversation: 'Conversation',
  Message: 'Message',
  RealEstateListing: 'RealEstateListing',
  AuditLog: 'AuditLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
